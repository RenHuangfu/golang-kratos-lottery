// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v3.12.4
// source: lottery/v1/admin.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAdminAddPrize = "/api.lottery.v1.Admin/AddPrize"
const OperationAdminAddPrizeList = "/api.lottery.v1.Admin/AddPrizeList"
const OperationAdminClearCoupon = "/api.lottery.v1.Admin/ClearCoupon"
const OperationAdminClearLotteryTimes = "/api.lottery.v1.Admin/ClearLotteryTimes"
const OperationAdminClearPrize = "/api.lottery.v1.Admin/ClearPrize"
const OperationAdminClearResult = "/api.lottery.v1.Admin/ClearResult"
const OperationAdminImportCoupon = "/api.lottery.v1.Admin/ImportCoupon"
const OperationAdminImportCouponWithCache = "/api.lottery.v1.Admin/ImportCouponWithCache"

type AdminHTTPServer interface {
	AddPrize(context.Context, *AddPrizeRequest) (*AddPrizeResponse, error)
	AddPrizeList(context.Context, *AddPrizeListRequest) (*AddPrizeListResponse, error)
	ClearCoupon(context.Context, *ClearCouponRequest) (*ClearCouponResponse, error)
	ClearLotteryTimes(context.Context, *ClearLotteryTimesRequest) (*ClearLotteryTimesResponse, error)
	ClearPrize(context.Context, *ClearPrizeRequest) (*ClearPrizeResponse, error)
	ClearResult(context.Context, *ClearResultRequest) (*ClearResultResponse, error)
	ImportCoupon(context.Context, *ImportCouponRequest) (*ImportCouponResponse, error)
	ImportCouponWithCache(context.Context, *ImportCouponWithCacheRequest) (*ImportCouponWithCacheResponse, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.POST("/admin/add_prize", _Admin_AddPrize0_HTTP_Handler(srv))
	r.POST("/admin/add_prize_list", _Admin_AddPrizeList0_HTTP_Handler(srv))
	r.POST("/admin/clear_prize", _Admin_ClearPrize0_HTTP_Handler(srv))
	r.POST("/admin/import_coupon", _Admin_ImportCoupon0_HTTP_Handler(srv))
	r.POST("/admin/import_coupon_cache", _Admin_ImportCouponWithCache0_HTTP_Handler(srv))
	r.POST("/admin/clear_coupon", _Admin_ClearCoupon0_HTTP_Handler(srv))
	r.POST("/admin/clear_lottery_times", _Admin_ClearLotteryTimes0_HTTP_Handler(srv))
	r.POST("/admin/clear_result", _Admin_ClearResult0_HTTP_Handler(srv))
}

func _Admin_AddPrize0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddPrizeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminAddPrize)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddPrize(ctx, req.(*AddPrizeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddPrizeResponse)
		return ctx.Result(200, reply)
	}
}

func _Admin_AddPrizeList0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddPrizeListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminAddPrizeList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddPrizeList(ctx, req.(*AddPrizeListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddPrizeListResponse)
		return ctx.Result(200, reply)
	}
}

func _Admin_ClearPrize0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClearPrizeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminClearPrize)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ClearPrize(ctx, req.(*ClearPrizeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClearPrizeResponse)
		return ctx.Result(200, reply)
	}
}

func _Admin_ImportCoupon0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ImportCouponRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminImportCoupon)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ImportCoupon(ctx, req.(*ImportCouponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ImportCouponResponse)
		return ctx.Result(200, reply)
	}
}

func _Admin_ImportCouponWithCache0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ImportCouponWithCacheRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminImportCouponWithCache)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ImportCouponWithCache(ctx, req.(*ImportCouponWithCacheRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ImportCouponWithCacheResponse)
		return ctx.Result(200, reply)
	}
}

func _Admin_ClearCoupon0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClearCouponRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminClearCoupon)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ClearCoupon(ctx, req.(*ClearCouponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClearCouponResponse)
		return ctx.Result(200, reply)
	}
}

func _Admin_ClearLotteryTimes0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClearLotteryTimesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminClearLotteryTimes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ClearLotteryTimes(ctx, req.(*ClearLotteryTimesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClearLotteryTimesResponse)
		return ctx.Result(200, reply)
	}
}

func _Admin_ClearResult0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClearResultRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminClearResult)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ClearResult(ctx, req.(*ClearResultRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClearResultResponse)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	AddPrize(ctx context.Context, req *AddPrizeRequest, opts ...http.CallOption) (rsp *AddPrizeResponse, err error)
	AddPrizeList(ctx context.Context, req *AddPrizeListRequest, opts ...http.CallOption) (rsp *AddPrizeListResponse, err error)
	ClearCoupon(ctx context.Context, req *ClearCouponRequest, opts ...http.CallOption) (rsp *ClearCouponResponse, err error)
	ClearLotteryTimes(ctx context.Context, req *ClearLotteryTimesRequest, opts ...http.CallOption) (rsp *ClearLotteryTimesResponse, err error)
	ClearPrize(ctx context.Context, req *ClearPrizeRequest, opts ...http.CallOption) (rsp *ClearPrizeResponse, err error)
	ClearResult(ctx context.Context, req *ClearResultRequest, opts ...http.CallOption) (rsp *ClearResultResponse, err error)
	ImportCoupon(ctx context.Context, req *ImportCouponRequest, opts ...http.CallOption) (rsp *ImportCouponResponse, err error)
	ImportCouponWithCache(ctx context.Context, req *ImportCouponWithCacheRequest, opts ...http.CallOption) (rsp *ImportCouponWithCacheResponse, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) AddPrize(ctx context.Context, in *AddPrizeRequest, opts ...http.CallOption) (*AddPrizeResponse, error) {
	var out AddPrizeResponse
	pattern := "/admin/add_prize"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminAddPrize))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) AddPrizeList(ctx context.Context, in *AddPrizeListRequest, opts ...http.CallOption) (*AddPrizeListResponse, error) {
	var out AddPrizeListResponse
	pattern := "/admin/add_prize_list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminAddPrizeList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) ClearCoupon(ctx context.Context, in *ClearCouponRequest, opts ...http.CallOption) (*ClearCouponResponse, error) {
	var out ClearCouponResponse
	pattern := "/admin/clear_coupon"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminClearCoupon))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) ClearLotteryTimes(ctx context.Context, in *ClearLotteryTimesRequest, opts ...http.CallOption) (*ClearLotteryTimesResponse, error) {
	var out ClearLotteryTimesResponse
	pattern := "/admin/clear_lottery_times"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminClearLotteryTimes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) ClearPrize(ctx context.Context, in *ClearPrizeRequest, opts ...http.CallOption) (*ClearPrizeResponse, error) {
	var out ClearPrizeResponse
	pattern := "/admin/clear_prize"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminClearPrize))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) ClearResult(ctx context.Context, in *ClearResultRequest, opts ...http.CallOption) (*ClearResultResponse, error) {
	var out ClearResultResponse
	pattern := "/admin/clear_result"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminClearResult))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) ImportCoupon(ctx context.Context, in *ImportCouponRequest, opts ...http.CallOption) (*ImportCouponResponse, error) {
	var out ImportCouponResponse
	pattern := "/admin/import_coupon"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminImportCoupon))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) ImportCouponWithCache(ctx context.Context, in *ImportCouponWithCacheRequest, opts ...http.CallOption) (*ImportCouponWithCacheResponse, error) {
	var out ImportCouponWithCacheResponse
	pattern := "/admin/import_coupon_cache"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminImportCouponWithCache))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
