// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: lottery/v1/admin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Admin_AddPrize_FullMethodName              = "/api.lottery.v1.Admin/AddPrize"
	Admin_AddPrizeList_FullMethodName          = "/api.lottery.v1.Admin/AddPrizeList"
	Admin_ClearPrize_FullMethodName            = "/api.lottery.v1.Admin/ClearPrize"
	Admin_ImportCoupon_FullMethodName          = "/api.lottery.v1.Admin/ImportCoupon"
	Admin_ImportCouponWithCache_FullMethodName = "/api.lottery.v1.Admin/ImportCouponWithCache"
	Admin_ClearCoupon_FullMethodName           = "/api.lottery.v1.Admin/ClearCoupon"
	Admin_ClearLotteryTimes_FullMethodName     = "/api.lottery.v1.Admin/ClearLotteryTimes"
	Admin_ClearResult_FullMethodName           = "/api.lottery.v1.Admin/ClearResult"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	AddPrize(ctx context.Context, in *AddPrizeRequest, opts ...grpc.CallOption) (*AddPrizeResponse, error)
	AddPrizeList(ctx context.Context, in *AddPrizeListRequest, opts ...grpc.CallOption) (*AddPrizeListResponse, error)
	ClearPrize(ctx context.Context, in *ClearPrizeRequest, opts ...grpc.CallOption) (*ClearPrizeResponse, error)
	ImportCoupon(ctx context.Context, in *ImportCouponRequest, opts ...grpc.CallOption) (*ImportCouponResponse, error)
	ImportCouponWithCache(ctx context.Context, in *ImportCouponWithCacheRequest, opts ...grpc.CallOption) (*ImportCouponWithCacheResponse, error)
	ClearCoupon(ctx context.Context, in *ClearCouponRequest, opts ...grpc.CallOption) (*ClearCouponResponse, error)
	ClearLotteryTimes(ctx context.Context, in *ClearLotteryTimesRequest, opts ...grpc.CallOption) (*ClearLotteryTimesResponse, error)
	ClearResult(ctx context.Context, in *ClearResultRequest, opts ...grpc.CallOption) (*ClearResultResponse, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) AddPrize(ctx context.Context, in *AddPrizeRequest, opts ...grpc.CallOption) (*AddPrizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPrizeResponse)
	err := c.cc.Invoke(ctx, Admin_AddPrize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddPrizeList(ctx context.Context, in *AddPrizeListRequest, opts ...grpc.CallOption) (*AddPrizeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPrizeListResponse)
	err := c.cc.Invoke(ctx, Admin_AddPrizeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ClearPrize(ctx context.Context, in *ClearPrizeRequest, opts ...grpc.CallOption) (*ClearPrizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearPrizeResponse)
	err := c.cc.Invoke(ctx, Admin_ClearPrize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ImportCoupon(ctx context.Context, in *ImportCouponRequest, opts ...grpc.CallOption) (*ImportCouponResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportCouponResponse)
	err := c.cc.Invoke(ctx, Admin_ImportCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ImportCouponWithCache(ctx context.Context, in *ImportCouponWithCacheRequest, opts ...grpc.CallOption) (*ImportCouponWithCacheResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportCouponWithCacheResponse)
	err := c.cc.Invoke(ctx, Admin_ImportCouponWithCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ClearCoupon(ctx context.Context, in *ClearCouponRequest, opts ...grpc.CallOption) (*ClearCouponResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearCouponResponse)
	err := c.cc.Invoke(ctx, Admin_ClearCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ClearLotteryTimes(ctx context.Context, in *ClearLotteryTimesRequest, opts ...grpc.CallOption) (*ClearLotteryTimesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearLotteryTimesResponse)
	err := c.cc.Invoke(ctx, Admin_ClearLotteryTimes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ClearResult(ctx context.Context, in *ClearResultRequest, opts ...grpc.CallOption) (*ClearResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearResultResponse)
	err := c.cc.Invoke(ctx, Admin_ClearResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility.
type AdminServer interface {
	AddPrize(context.Context, *AddPrizeRequest) (*AddPrizeResponse, error)
	AddPrizeList(context.Context, *AddPrizeListRequest) (*AddPrizeListResponse, error)
	ClearPrize(context.Context, *ClearPrizeRequest) (*ClearPrizeResponse, error)
	ImportCoupon(context.Context, *ImportCouponRequest) (*ImportCouponResponse, error)
	ImportCouponWithCache(context.Context, *ImportCouponWithCacheRequest) (*ImportCouponWithCacheResponse, error)
	ClearCoupon(context.Context, *ClearCouponRequest) (*ClearCouponResponse, error)
	ClearLotteryTimes(context.Context, *ClearLotteryTimesRequest) (*ClearLotteryTimesResponse, error)
	ClearResult(context.Context, *ClearResultRequest) (*ClearResultResponse, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServer struct{}

func (UnimplementedAdminServer) AddPrize(context.Context, *AddPrizeRequest) (*AddPrizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPrize not implemented")
}
func (UnimplementedAdminServer) AddPrizeList(context.Context, *AddPrizeListRequest) (*AddPrizeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPrizeList not implemented")
}
func (UnimplementedAdminServer) ClearPrize(context.Context, *ClearPrizeRequest) (*ClearPrizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearPrize not implemented")
}
func (UnimplementedAdminServer) ImportCoupon(context.Context, *ImportCouponRequest) (*ImportCouponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCoupon not implemented")
}
func (UnimplementedAdminServer) ImportCouponWithCache(context.Context, *ImportCouponWithCacheRequest) (*ImportCouponWithCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCouponWithCache not implemented")
}
func (UnimplementedAdminServer) ClearCoupon(context.Context, *ClearCouponRequest) (*ClearCouponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCoupon not implemented")
}
func (UnimplementedAdminServer) ClearLotteryTimes(context.Context, *ClearLotteryTimesRequest) (*ClearLotteryTimesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearLotteryTimes not implemented")
}
func (UnimplementedAdminServer) ClearResult(context.Context, *ClearResultRequest) (*ClearResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearResult not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}
func (UnimplementedAdminServer) testEmbeddedByValue()               {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	// If the following call pancis, it indicates UnimplementedAdminServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_AddPrize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPrizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddPrize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddPrize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddPrize(ctx, req.(*AddPrizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddPrizeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPrizeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddPrizeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddPrizeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddPrizeList(ctx, req.(*AddPrizeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ClearPrize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearPrizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ClearPrize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ClearPrize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ClearPrize(ctx, req.(*ClearPrizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ImportCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ImportCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ImportCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ImportCoupon(ctx, req.(*ImportCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ImportCouponWithCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportCouponWithCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ImportCouponWithCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ImportCouponWithCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ImportCouponWithCache(ctx, req.(*ImportCouponWithCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ClearCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ClearCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ClearCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ClearCoupon(ctx, req.(*ClearCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ClearLotteryTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearLotteryTimesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ClearLotteryTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ClearLotteryTimes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ClearLotteryTimes(ctx, req.(*ClearLotteryTimesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ClearResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ClearResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ClearResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ClearResult(ctx, req.(*ClearResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.lottery.v1.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPrize",
			Handler:    _Admin_AddPrize_Handler,
		},
		{
			MethodName: "AddPrizeList",
			Handler:    _Admin_AddPrizeList_Handler,
		},
		{
			MethodName: "ClearPrize",
			Handler:    _Admin_ClearPrize_Handler,
		},
		{
			MethodName: "ImportCoupon",
			Handler:    _Admin_ImportCoupon_Handler,
		},
		{
			MethodName: "ImportCouponWithCache",
			Handler:    _Admin_ImportCouponWithCache_Handler,
		},
		{
			MethodName: "ClearCoupon",
			Handler:    _Admin_ClearCoupon_Handler,
		},
		{
			MethodName: "ClearLotteryTimes",
			Handler:    _Admin_ClearLotteryTimes_Handler,
		},
		{
			MethodName: "ClearResult",
			Handler:    _Admin_ClearResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lottery/v1/admin.proto",
}
